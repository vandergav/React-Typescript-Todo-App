{"version":3,"sources":["App/App.tsx","actions/index.tsx","reducers/completeReducer.tsx","reducers/incompleteReducer.tsx","reducers/index.tsx","index.tsx"],"names":["connect","state","complete","incomplete","markComplete","todo","type","markIncomplete","deleteTodo","input","useRef","renderList","looper","ListGroup","variant","className","map","index","ListGroupItem","style","display","justifyContent","onClick","Container","InputGroup","FormControl","placeholder","ref","Append","Button","current","val","value","addTodo","initialState","completeReducer","action","filter","incompleteReducer","combineReducers","ReactDOM","render","StrictMode","store","createStore","rootReducer","document","getElementById"],"mappings":"wPA4FeA,eAPS,SAACC,GACvB,MAAO,CACLC,SAAUD,EAAMC,SAChBC,WAAYF,EAAME,cAIkB,CACtCC,aCnFqD,SAACC,GACtD,MAAO,CACLC,KAAM,gBACND,SDiFFE,eC9EyD,SAACF,GAC1D,MAAO,CACLC,KAAM,kBACND,SD4EFG,WCzEiD,SAACH,GAClD,MAAO,CACLC,KAAM,cACND,UDmEWL,EA5EoB,SAAC,GAM7B,IALLE,EAKI,EALJA,SACAC,EAII,EAJJA,WACAC,EAGI,EAHJA,aACAG,EAEI,EAFJA,eACAC,EACI,EADJA,WAEMC,EAAQC,iBAAyB,MAEjCC,EAAa,SAACL,GAClB,IAAMM,EAAkB,aAATN,EAAsBJ,EAAWC,EAChD,OACE,eAACU,EAAA,EAAD,CAAWC,QAAQ,QAAQC,UAAU,MAArC,UACE,6BAAKT,IACJM,EAAOI,KAAI,SAACX,EAAMY,GACjB,OACE,eAACC,EAAA,EAAD,CAEEJ,QAAkB,aAATR,EAAsB,UAAY,SAC3Ca,MAAO,CAAEC,QAAS,OAAQC,eAAgB,iBAH5C,UAKE,8BAAMhB,IACN,gCACE,mBACEU,UAAS,iBACE,aAATT,EAAsB,QAAU,QADzB,QAGTgB,QAAS,WACE,aAAThB,EACIC,EAAeF,GACfD,EAAaC,MAGrB,mBACEU,UAAS,mBACTO,QAAS,kBAAMd,EAAWH,WAlBzBY,UAmCjB,OACE,eAACM,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAYT,UAAU,MAAtB,UACE,cAACU,EAAA,EAAD,CAAaC,YAAY,OAAOC,IAAKlB,IACrC,cAACe,EAAA,EAAWI,OAAZ,UACE,eAACC,EAAA,EAAD,CAAQf,QAAQ,YAAYQ,QAAS,kBAZ7B,WACd,GAAIb,EAAMqB,QAAS,CACjB,IAAMC,EAAMtB,EAAMqB,QAAQE,MAC1BzB,EAAewB,IASgCE,IAA3C,UACE,mBAAGlB,UAAU,qBADf,cAMHJ,EAAW,YACXA,EAAW,oB,eExEZuB,EAAyB,GAiBhBC,EAZX,WAAmC,IAAlClC,EAAiC,uDAAzBiC,EAAcE,EAAW,uCACpC,OAAQA,EAAO9B,MACb,IAAK,gBACH,MAAM,GAAN,mBAAWL,GAAX,CAAkBmC,EAAO/B,OAC3B,IAAK,kBACL,IAAK,cACH,OAAO,YAAIJ,EAAMoC,QAAO,SAAChC,GAAD,OAAUA,IAAS+B,EAAO/B,SACpD,QACE,OAAO,YAAIJ,KCbXiC,EAA2B,GAiBlBI,EAZX,WAAmC,IAAlCrC,EAAiC,uDAAzBiC,EAAcE,EAAW,uCACpC,OAAQA,EAAO9B,MACb,IAAK,kBACH,MAAM,GAAN,mBAAWL,GAAX,CAAkBmC,EAAO/B,OAC3B,IAAK,cACL,IAAK,gBACH,OAAO,YAAIJ,EAAMoC,QAAO,SAAChC,GAAD,OAAUA,IAAS+B,EAAO/B,SACpD,QACE,OAAO,YAAIJ,KChBFsC,cAAgB,CAC3BrC,WACAC,e,MCEJqC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOC,YAAYC,GAA7B,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.ab5b1842.chunk.js","sourcesContent":["import React, { useRef } from 'react';\r\n\r\nimport {\r\n  Container,\r\n  InputGroup,\r\n  FormControl,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Button,\r\n} from 'react-bootstrap';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { markComplete, markIncomplete, deleteTodo } from '../actions/index';\r\nimport storeType from '../types/storeType';\r\nimport AppPropType from './AppPropType';\r\n\r\nconst App: React.FC<AppPropType> = ({\r\n  complete,\r\n  incomplete,\r\n  markComplete,\r\n  markIncomplete,\r\n  deleteTodo,\r\n}) => {\r\n  const input = useRef<HTMLInputElement>(null);\r\n\r\n  const renderList = (type: 'Complete' | 'Incomplete') => {\r\n    const looper = type === 'Complete' ? complete : incomplete; //which array to loop over\r\n    return (\r\n      <ListGroup variant=\"flush\" className=\"m-2\">\r\n        <h3>{type}</h3>\r\n        {looper.map((todo, index) => {\r\n          return (\r\n            <ListGroupItem\r\n              key={index}\r\n              variant={type === 'Complete' ? 'success' : 'danger'}\r\n              style={{ display: 'flex', justifyContent: 'space-between' }}\r\n            >\r\n              <div>{todo}</div>\r\n              <div>\r\n                <i\r\n                  className={`fas fa-${\r\n                    type === 'Complete' ? 'minus' : 'check'\r\n                  } m-2`}\r\n                  onClick={() => {\r\n                    type === 'Complete'\r\n                      ? markIncomplete(todo)\r\n                      : markComplete(todo);\r\n                  }}\r\n                ></i>\r\n                <i\r\n                  className={`fas fa-trash m-2`}\r\n                  onClick={() => deleteTodo(todo)}\r\n                ></i>\r\n              </div>\r\n            </ListGroupItem>\r\n          );\r\n        })}\r\n      </ListGroup>\r\n    );\r\n  };\r\n\r\n  const addTodo = () => {\r\n    if (input.current) {\r\n      const val = input.current.value;\r\n      markIncomplete(val);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <InputGroup className=\"m-3\">\r\n        <FormControl placeholder=\"Todo\" ref={input} />\r\n        <InputGroup.Append>\r\n          <Button variant=\"secondary\" onClick={() => addTodo()}>\r\n            <i className=\"fas fa-plus mr-3\"></i>\r\n            Add\r\n          </Button>\r\n        </InputGroup.Append>\r\n      </InputGroup>\r\n      {renderList('Complete')}\r\n      {renderList('Incomplete')}\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: storeType) => {\r\n  return {\r\n    complete: state.complete,\r\n    incomplete: state.incomplete,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  markComplete,\r\n  markIncomplete,\r\n  deleteTodo,\r\n})(App); //pass App to whatever the connect function returns\r\n","/*\r\n    Action Creators\r\n*/\r\n\r\nimport {\r\n  markCompleteActionCreator,\r\n  markIncompleteActionCreator,\r\n  deleteTodoActionCreator,\r\n} from '../types/actionCreatorType';\r\n\r\nexport const markComplete: markCompleteActionCreator = (todo) => {\r\n  return {\r\n    type: 'MARK_COMPLETE',\r\n    todo,\r\n  };\r\n};\r\nexport const markIncomplete: markIncompleteActionCreator = (todo) => {\r\n  return {\r\n    type: 'MARK_INCOMPLETE',\r\n    todo,\r\n  };\r\n};\r\nexport const deleteTodo: deleteTodoActionCreator = (todo) => {\r\n  return {\r\n    type: 'DELETE_TODO',\r\n    todo,\r\n  };\r\n};\r\n","import { Reducer } from 'redux';\r\nimport {\r\n  markCompleteAction,\r\n  markIncompleteAction,\r\n  deleteTodoAction,\r\n} from '../types/actionType';\r\nimport { complete } from '../types/storeType';\r\n\r\nconst initialState: complete = [];\r\n\r\nconst completeReducer: Reducer<\r\n  complete,\r\n  markCompleteAction | markIncompleteAction | deleteTodoAction\r\n> = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'MARK_COMPLETE':\r\n      return [...state, action.todo];\r\n    case 'MARK_INCOMPLETE':\r\n    case 'DELETE_TODO':\r\n      return [...state.filter((todo) => todo !== action.todo)];\r\n    default:\r\n      return [...state];\r\n  }\r\n};\r\n\r\nexport default completeReducer;\r\n","import { Reducer } from 'redux';\r\nimport {\r\n  markCompleteAction,\r\n  markIncompleteAction,\r\n  deleteTodoAction,\r\n} from '../types/actionType';\r\nimport { incomplete } from '../types/storeType';\r\n\r\nconst initialState: incomplete = [];\r\n\r\nconst incompleteReducer: Reducer<\r\n  incomplete,\r\n  markCompleteAction | markIncompleteAction | deleteTodoAction\r\n> = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'MARK_INCOMPLETE':\r\n      return [...state, action.todo];\r\n    case 'DELETE_TODO':\r\n    case 'MARK_COMPLETE':\r\n      return [...state.filter((todo) => todo !== action.todo)];\r\n    default:\r\n      return [...state];\r\n  }\r\n};\r\n\r\nexport default incompleteReducer;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport complete from './completeReducer';\r\nimport incomplete from './incompleteReducer';\r\n\r\nexport default combineReducers({\r\n    complete,\r\n    incomplete\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/App';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nimport rootReducer from './reducers';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={createStore(rootReducer)}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}